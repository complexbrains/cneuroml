:py:mod:`cneuroml.dl.base.litmodule_test`
=========================================

.. py:module:: cneuroml.dl.base.litmodule_test

.. autoapi-nested-parse::

   Tests for the Base Lightning Module.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cneuroml.dl.base.litmodule_test.GenericLitModule



Functions
~~~~~~~~~

.. autoapisummary::

   cneuroml.dl.base.litmodule_test.nnmodule
   cneuroml.dl.base.litmodule_test.optimizer_partial
   cneuroml.dl.base.litmodule_test.scheduler_partial
   cneuroml.dl.base.litmodule_test.test_constructor
   cneuroml.dl.base.litmodule_test.litmodule
   cneuroml.dl.base.litmodule_test.test_training_step
   cneuroml.dl.base.litmodule_test.test_validation_step
   cneuroml.dl.base.litmodule_test.test_test_step
   cneuroml.dl.base.litmodule_test.test_configure_optimizers



.. py:function:: nnmodule() -> torch.nn.Module

   Instantiates and returns a generic ``torch.nn.Module`` object.

   :returns: A generic ``torch.nn.Module`` object.


.. py:function:: optimizer_partial() -> functools.partial[torch.optim.Optimizer]

   Returns a generic ``torch.optim.Optimizer`` partial object.

   :returns: A generic ``torch.optim.Optimizer`` partial object.


.. py:function:: scheduler_partial() -> functools.partial[torch.optim.lr_scheduler.LRScheduler]

   Returns a generic PyTorch ``LRScheduler`` partial object.

   :returns:

             A generic ``torch.optim.lr_scheduler.LRScheduler`` partial
                 object.


.. py:class:: GenericLitModule(nnmodule: torch.nn.Module, optimizer_partial: functools.partial[torch.optim.Optimizer], scheduler_partial: functools.partial[torch.optim.lr_scheduler.LRScheduler])


   Bases: :py:obj:`cneuroml.dl.base.BaseLitModule`

   Generic Lightning Module.

   Attributes:
   nnmodule (``torch.nn.Module``): The PyTorch network module.
   optimizer (``torch.optim.Optimizer``): The PyTorch optimizer.
   scheduler (``torch.optim.lr_scheduler.LRScheduler``): The PyTorch
       scheduler.

   Constructor.

   Calls parent constructor and handles arguments.

   :param nnmodule: The ``torch.nn.Module`` object.
   :param optimizer_partial: The ``torch.optim.Optimizer`` partial
                             object.
   :param scheduler_partial: The
                             ``torch.optim.lr_scheduler.LRScheduler`` partial
                             object.

   .. py:method:: step(batch: torch.Tensor | tuple[torch.Tensor], stage: Literal[train, val, test]) -> jaxtyping.Float[torch.Tensor, ]

      Step method common to all stages.

      :param batch: Input data batch (images/sound/language/...).
      :param stage: Current stage (train/val/test).

      :returns: The loss.



.. py:function:: test_constructor(nnmodule: torch.nn.Module, optimizer_partial: functools.partial[torch.optim.Optimizer], scheduler_partial: functools.partial[torch.optim.lr_scheduler.LRScheduler]) -> None

   Test constructor.

   :param nnmodule: A generic ``torch.nn.Module`` object.
   :param optimizer_partial: A generic ``torch.optim.Optimizer`` partial
                             object.
   :param scheduler_partial: A generic
                             ``torch.optim.lr_scheduler.LRScheduler`` partial object.


.. py:function:: litmodule(nnmodule: torch.nn.Module, optimizer_partial: functools.partial[torch.optim.Optimizer], scheduler_partial: functools.partial[torch.optim.lr_scheduler.LRScheduler]) -> cneuroml.dl.base.BaseLitModule

   Instantiates and returns a generic ``BaseLitModule`` object.

   :param nnmodule: A generic ``torch.nn.Module`` object.
   :param optimizer_partial: A generic ``torch.optim.Optimizer`` partial
                             object.
   :param scheduler_partial: A generic
                             ``torch.optim.lr_scheduler.LRScheduler`` partial object.

   :returns: A generic ``BaseLitModule`` object.


.. py:function:: test_training_step(litmodule: GenericLitModule) -> None

   Test ``training_step`` method.

   :param litmodule: A generic ``BaseLitModule`` object.


.. py:function:: test_validation_step(litmodule: GenericLitModule) -> None

   Test ``validation_step`` method.

   :param litmodule: A generic ``BaseLitModule`` object.


.. py:function:: test_test_step(litmodule: GenericLitModule) -> None

   Test ``test_step`` method.

   :param litmodule: A generic ``BaseLitModule`` object.


.. py:function:: test_configure_optimizers(litmodule: GenericLitModule) -> None

   Test ``configure_optimizers`` method.

   :param litmodule: A generic ``BaseLitModule`` object.


