:py:mod:`cneuroml.dl.base.litmodule`
====================================

.. py:module:: cneuroml.dl.base.litmodule

.. autoapi-nested-parse::

   Base Lightning Module.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cneuroml.dl.base.litmodule.BaseLitModule




.. py:class:: BaseLitModule(nnmodule: torch.nn.Module, optimizer_partial: functools.partial[torch.optim.Optimizer], scheduler_partial: functools.partial[torch.optim.lr_scheduler.LRScheduler])


   Bases: :py:obj:`lightning.pytorch.LightningModule`

   Base LitModule.

   Interfaces with the abstract
   ``lightning.pytorch.LightningModule`` methods.

   Subclasses should implement the ``step`` method.

   .. attribute:: nnmodule

      The PyTorch network module.

      :type: ``nn.Module``

   .. attribute:: optimizer

      The PyTorch optimizer.

      :type: ``torch.optim.Optimizer``

   .. attribute:: scheduler

      The
      PyTorch scheduler.

      :type: ``torch.optim.lr_scheduler.LRScheduler``

   Constructor.

   Calls parent constructor and handles arguments.

   :param nnmodule: The ``torch.nn.Module`` object.
   :param optimizer_partial: The ``torch.optim.Optimizer`` partial
                             object.
   :param scheduler_partial: The
                             ``torch.optim.lr_scheduler.LRScheduler`` partial
                             object.

   .. py:method:: step(batch: torch.Tensor | tuple[torch.Tensor], stage: Literal[train, val, test]) -> jaxtyping.Float[torch.Tensor, ]
      :abstractmethod:

      Step method common to all stages.

      :param batch: Input data batch (images/sound/language/...).
      :param stage: Current stage (train/val/test).

      :returns: The loss.


   .. py:method:: training_step(batch: torch.Tensor | tuple[torch.Tensor]) -> jaxtyping.Float[torch.Tensor, ]

      Training step method.

      :param batch: Input data batch (images/sound/language/...).

      :returns: The loss.


   .. py:method:: validation_step(batch: torch.Tensor | tuple[torch.Tensor]) -> jaxtyping.Float[torch.Tensor, ]

      Validation step method.

      :param batch: Input data batch (images/sound/language/...).

      :returns: The loss.


   .. py:method:: test_step(batch: torch.Tensor | tuple[torch.Tensor]) -> jaxtyping.Float[torch.Tensor, ]

      Test step method.

      :param batch: Input data batch (images/sound/language/...).

      :returns: The loss.


   .. py:method:: configure_optimizers() -> tuple[list[torch.optim.Optimizer], list[torch.optim.lr_scheduler.LRScheduler]]

      Configure the PyTorch ``Optimizer`` & ``LRScheduler`` objs.

      :returns: The ``torch.optim.Optimizer`` and
                ``torch.optim.lr_scheduler.LRScheduler`` objects.



