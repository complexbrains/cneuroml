:py:mod:`cneuroml.dl.base.datamodule`
=====================================

.. py:module:: cneuroml.dl.base.datamodule

.. autoapi-nested-parse::

   Base Lightning DataModule.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cneuroml.dl.base.datamodule.BaseDataModule




.. py:class:: BaseDataModule(data_dir: str, per_device_batch_size: int = 1, per_device_num_workers: int = 0, device_type: Literal[cpu, gpu] = 'gpu')


   Bases: :py:obj:`lightning.pytorch.LightningDataModule`

   The Base DataModule class.

   Subclasses should implement any of the following attributes that
   are to be utilized:

   - ``train_data`` (``torch.utils.data.Dataset``): Training dataset.

   - ``val_data`` (``torch.utils.data.Dataset``): Validation dataset.

   - ``test_data`` (``torch.utils.data.Dataset``): Testing dataset.

   - ``predict_data`` (``torch.utils.data.Dataset``): Prediction
   dataset.

   .. attribute:: data_dir

      Path to the data directory.

      :type: str

   .. attribute:: per_device_batch_size

      Per-device number of samples to
      load per iteration.

      :type: int

   .. attribute:: per_device_num_workers

      Number of CPU processes to use
      for data loading (``0`` means that the data will be loaded
      by each main process)

      :type: int

   .. attribute:: pin_memory

      Whether to copy tensors into device pinned
      memory before returning them (is set to ``True`` if using
      GPUs).

      :type: bool

   Constructor.

   Calls parent constructor and stores arguments.

   :param data_dir: Path to the data directory.
   :param per_device_batch_size: Per-device number of samples to load
                                 per iteration.
   :param per_device_num_workers: Number of CPU processes to use for
                                  data loading (``0`` means that the data will be loaded
                                  by each main process)
   :param device_type: The compute device type to use (``cpu`` or
                       ``gpu``).

   .. py:method:: load_state_dict(state_dict: dict[str, int]) -> None

      Loads an existing ``state_dict``.

      Currently this is only used to load the
      ``per_device_batch_size``.

      :param state_dict: The state dictionary to load.


   .. py:method:: state_dict() -> dict[str, int]

      Returns this datamodule's ``state_dict``.

      Currently this is only used to save the
      ``per_device_batch_size``.

      :returns: A copy of this datamodule's state dictionary.


   .. py:method:: train_dataloader() -> torch.utils.data.DataLoader[torch.Tensor]

      Returns the train ``torch.utils.data.DataLoader`` object.

      Builds and returns a new ``torch.utils.data.DataLoader`` object
      using ``train_data`` and previously defined attributes.

      :returns: The training ``torch.utils.data.DataLoader`` object.

      :raises AttributeError: If ``train_data`` is not defined.


   .. py:method:: val_dataloader() -> torch.utils.data.DataLoader[torch.Tensor]

      Returns the val ``torch.utils.data.DataLoader`` object.

      Builds and returns a new ``torch.utils.data.DataLoader`` object
      using ``val_data`` and previously defined attributes.

      :returns: The validation ``torch.utils.data.DataLoader`` object.

      :raises AttributeError: If ``val_data`` is not defined.


   .. py:method:: test_dataloader() -> torch.utils.data.DataLoader[torch.Tensor]

      Returns the test ``torch.utils.data.DataLoader`` object.

      Builds and returns a new ``torch.utils.data.DataLoader`` object
      using ``test_data`` and previously defined attributes.

      :returns: The testing ``torch.utils.data.DataLoader`` object.

      :raises AttributeError: If ``test_data`` is not defined.


   .. py:method:: predict_dataloader() -> torch.utils.data.DataLoader[torch.Tensor]

      Returns the predict ``torch.utils.data.DataLoader`` object.

      Builds and returns a new ``torch.utils.data.DataLoader`` object
      using ``predict_data`` and previously defined attributes.

      :returns: The prediction ``torch.utils.data.DataLoader`` object.

      :raises AttributeError: If ``predict_data`` is not defined.



